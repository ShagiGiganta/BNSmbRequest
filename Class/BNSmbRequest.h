//
//  BNSmbRequest.h
//  SambaSample
//
//  Created by dev.benrya on 11/11/07.
//  Copyright (c) 2011 benrya. All rights reserved.
//

#if TARGET_IPHONE
	#import <CFNetwork/CFNetwork.h>
#endif
#import <Foundation/Foundation.h>
//#import <stdio.h>

typedef enum {
	BNSmbRequestOperationDownload,
	BNSmbRequestOperationUpload,
	BNSmbRequestOperationCreateDirectory,
    BNSmbRequestOperationRename,
    BNSmbRequestOperationGetStatus,
    BNSmbRequestOperationGetContexts
} BNSmbRequestOperation;

typedef enum {
    BNSmbConnectionFailureErrorType = 1,
    BNSmbRequestTimedOutErrorType = 2,
    BNSmbAuthenticationErrorType = 3,
    BNSmbRequestCancelledErrorType = 4,
	BNSmbUnableToCreateRequestErrorType = 5,
	BNSmbInternalErrorWhileBuildingRequestType  = 6,
    BNSmbInternalErrorWhileApplyingCredentialsType  = 7
} BNSmbRequestErrorType;

typedef enum {
	BNSmbRequestStatusNone,
	BNSmbRequestStatusOpenNetworkConnection,
	BNSmbRequestStatusReadingFromStream,
	BNSmbRequestStatusWritingToStream,
	BNSmbRequestStatusClosedNetworkConnection,
	BNSmbRequestStatusError
} BNSmbRequestStatus;

/* When using file streams, the 32KB buffer is probably not enough.
 * A good way to establish a buffer size is to increase it over time.
 * If every read consumes the entire buffer, start increasing the buffer
 * size, and at some point you would then cap it. 32KB is fine for network
 * sockets, although using the technique described above is still a good idea.
 */
#define kBNSmbRequestBufferSize 32768

/* The error domain that all errors generated by S7FTPRequest use. */
extern NSString *const BNSmbRequestErrorDomain;

@interface BNSmbRequest : NSOperation <NSStreamDelegate> {
	
@private
	BOOL _complete;
	
	/* State */
	
	NSOutputStream *_writeStream;
	NSInputStream *_readStream;
	UInt8 _buffer[kBNSmbRequestBufferSize];
	UInt32 _bufferOffset;
	UInt32 _bufferLimit;
	
	/* For properties */
	
	id _delegate;
	SEL _didFinishSelector;
	SEL _didFailSelector;
	SEL _willStartSelector;
	SEL _didChangeStatusSelector;
	SEL _bytesWrittenSelector;
	
	UInt64 _fileSize;
	SInt64 _bytesWritten;
	BNSmbRequestStatus _status;
	NSError *_error;
	
	BNSmbRequestOperation _operation;
	
	NSTimeInterval _timeOutSeconds;
	
	NSDictionary *_userInfo;
	
	NSString *_username;
	NSString *_password;
	NSString *_workgroup;
	
	NSString *_smbURL;
	NSString *_filePath;
	NSString *_directoryName;
	
	NSDate *_timeOutDate;
	
	NSRecursiveLock *_cancelledLock;
	BOOL complete;
    
    id _response;
    
    UIProgressView *_progressView;
}

@property (nonatomic, assign) id delegate;
/** Called on the delegate when the request completes successfully. */
@property (nonatomic, assign) SEL didFinishSelector;
/** Called on the delegate when the request fails. */
@property (nonatomic, assign) SEL didFailSelector;
/** Called on the delegate when the transfer is about to start. */
@property (nonatomic, assign) SEL willStartSelector;
/** Called on the delegate when the status of the request instance changed. */
@property (nonatomic, assign) SEL didChangeStatusSelector;
/** Called on the delegate when some amount of bytes were transferred. */
@property (nonatomic, assign) SEL bytesWrittenSelector;

/** If 0 the size cannot be determined. fileSize is determined when delegate receives a notification via willStartSelector. */
@property (nonatomic, readonly) UInt64 fileSize;
/** The amount of bytes currently uploaded or downloaded. Delegate can listen to the changes of this property via bytesWrittenSelector. */
@property (nonatomic, readonly) SInt64 bytesWritten;
/** Current instance status. Delegate can listen to the changes of this property via didChangeStatusSelector. */
@property (nonatomic, readonly) BNSmbRequestStatus status;
/** Populated when error occurs. */
@property (nonatomic, retain) NSError *error;

/** Specifies the operation for the request to invoke. */
@property (nonatomic, assign) BNSmbRequestOperation operation;

/** In this dictionary you can pass any state info you need. */
@property (nonatomic, retain) NSDictionary *userInfo;

/** Username for authentication. */
@property (nonatomic, copy) NSString *username;
/** Password for authentication. */
@property (nonatomic, copy) NSString *password;

@property (nonatomic, copy) NSString *workgroup;

/** The url for this operation. */
@property (nonatomic, copy) NSString *smbURL;
/** Specifies the file to upload or to write the downloaded data to. */
@property (nonatomic, copy) NSString *filePath;
/** Denotes the directory to create. Specified when operation is S7FTPRequestOperationCreateDirectory. */
@property (nonatomic, copy) NSString *directoryName;

@property (assign) NSTimeInterval timeOutSeconds;

@property (retain) id response; 

@property (assign) UIProgressView *progressView;

#pragma mark init / dealloc

- (id)initWithURL:(NSString *)smbURL toDownloadFile:(NSString *)filePath;
+ (id)requestWithURL:(NSString *)smbURL toDownloadFile:(NSString *)filePath;

- (id)initWithURL:(NSString *)smbURL toUploadFile:(NSString *)filePath;
+ (id)requestWithURL:(NSString *)smbURL toUploadFile:(NSString *)filePath;

- (id)initWithURL:(NSString *)smbURL toCreateDirectory:(NSString *)directoryName;
+ (id)requestWithURL:(NSString *)smbURL toCreateDirectory:(NSString *)directoryName;

- (id)initWithURLToGetStatus:(NSString *)smbURL;
+ (id)requestToGetStatus:(NSString *)smbURL;

- (id)initWithURLToGetContexts:(NSString *)smbURL;
+ (id)requestToGetContexts:(NSString *)smbURL;

- (id)initWithCreateDirectory:(NSString *)smbURL;
+ (id)requestWithCreateDirectory:(NSString *)smbURL;

#pragma mark Request logic

- (void)cancelRequest;
- (void)startRequest;
- (void)startSynchronous;
- (void)startAsynchronous;

- (void)handleCreateDirectoryEvent:(NSStreamEvent)eventCode;
- (void)resetTimeout;


+ (NSOperationQueue *)sharedRequestQueue;

@end
